
==================== FINAL INTERFACE ====================
2020-05-15 16:52:00.802934 UTC

interface main:Main 8065
  interface hash: 1e8da8a616b55266752345bd31292ccc
  ABI hash: faa780cc86566c2738f9c9ff97e2628f
  export-list hash: e481ee0088673d2f07d28121e7c289ef
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: bef422581fa38d9832384f2c31c27385
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.askPlayerMove
  Main.checkCapturedKing
  Main.checkMoveInput
  Main.checkPlayerMove
  Main.congratsString
  Main.extractMove
  Main.extractSingleMove
  Main.gameOver
  Main.getPawnPromotion
  Main.getPlayerMove
  Main.main
  Main.makeMove
  Main.nextTurn
  Main.runGame
  Main.stalelmateString
  Main.updateAll
  Main.validPawnPromote
module dependencies: ChessBoard
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Data.Char 1b375a88c42d83fdb0075d9bd7d91b40
import  -/  base-4.12.0.0:Data.Foldable bdeac546b12282c8986759606b9295a5
import  -/  base-4.12.0.0:Data.List 6c60559263db7cf0f22549b9673785b9
import  -/  base-4.12.0.0:Data.Maybe d07d5847f427040b05c592631bb0d4af
import  -/  base-4.12.0.0:Data.Tuple 3bf97d65c8e783335a95628f6e4f6f75
import  -/  base-4.12.0.0:GHC.Base fbe365a916ebeeeb4bc1f895dbe83e42
import  -/  base-4.12.0.0:GHC.IO.Handle 5b3f689b082eee6e7562e9b58323b91a
import  -/  base-4.12.0.0:GHC.IO.Handle.FD 5b13f4cf43b26c3d52e20458852a8546
import  -/  base-4.12.0.0:GHC.IO.Handle.Types b0667350495b7969f4b13a8e9686d1b4
import  -/  base-4.12.0.0:GHC.List bb56c56a8dc21963b5824914872db158
import  -/  base-4.12.0.0:GHC.Num 8203d3fee487126cffd5e55ba5d0e8c3
import  -/  base-4.12.0.0:GHC.Unicode 83c3eb852482283851a887a8599902d0
import  -/  base-4.12.0.0:Prelude 80c668cb99fbafebd524c5e897f8c982
import  -/  base-4.12.0.0:System.Exit e7f5ab9b9f84f654c1856120513bc8bb
import  -/  base-4.12.0.0:System.IO 51ffc52e2e8495d5c7b596557cf2be89
import  -/  ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  ChessBoard e99d665849fa1dcac8a64ec03d28fea7
  exports: 13b42b22814f31f9b42801af93b414ca
  Bishop 33a01f1481d613f6ed8730118e3d0fa7
  Board a80f7fb5a45a659392b7c155fbeb7f27
  CheckMate 8d6996e85f4afb511d2a09756a1e4274
  ChessPiece a9339aa10bc82e16fb147d7654bbb4ff
  Game 1b37bcbf66d66a9b59f0cfb8ddccc287
  Game 7a011c4c9efc3cb6ff7b0b66496d2ceb
  King ef4672b8bed19200ea758d537255abde
  Knight d270482572ff705436ee39ea7bd0b09c
  Location e477d0b2145f375df518bf44dd39364c
  Location 61763d609e56610dc321c7932fa09a95
  Pawn a8025f4ad4980754b961ed8d8d2b15d3
  Piece 8c4019f016dada384642a61cf985e68b
  Piece c96a7f101a22e2b2d8fdf2cc4d7a27a9
  Player f1c0ccf8eb016af443d38cb308a04ac8
  Queen 247652067f6e322f552d3e975fab7632
  Rook 8e601e5330964ce92980172b31c7e666
  StaleMate 244daa0f483229a72f42f723e33049cc
  blackPlayer 8e237cda1d273d30528e8df95ef36c1d
  checkPawnPromotion 57f2291bfcedc5f392a508c1b09e5e08
  game 9505daac119756ab54015b8a7a5b25aa
  isGameOver eaeb8ae20141c59f190bbacfca7eebaf
  isValidPlayerMove 1b6273c7a7a1d987a2919aa57175e2cb
  pieceValue 7e21c75cdbb3640536f5cfcff7863bb8
  printBoard 3ba9f94d9a7388bc9c758727ba5cfe4a
  promotePawn c991e6f3905ca0d451262342f1e59d59
  turnToColor 58967aae67491883767de3e2e249f090
  updateActive a2c5b2e585a4df6e666a17965ca96ea7
  updateBoard 78839e84f1cc7fcc65c01d3dbfad07d4
  updateCaptured 75af6457d224d9ca63d6397f24e80093
  updateGameBoard 5ae8de6b28f7b817024b53ae02c29039
  updateGamePlayers c9527da6d325218f76284ec8120c4271
  updatePlayerName dcf32fd922c0fdd9f4c7d918337d20eb
  updateScore cb1351e0219826279df467a8d725406a
  whitePlayer 29bcc25a12157d2e6701f2fd2a546792
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
54892a70bf640d476551e228164c636e
  $waskPlayerMove ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Prim.Int# -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,1*U><L,1*U><S,1*U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (ww :: GHC.Prim.Int#) ->
                 case ww of wild {
                   DEFAULT
                   -> GHC.IO.Handle.Text.hPutStr'
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           Main.askPlayerMove5
                           (GHC.Base.++ @ GHC.Types.Char w1 Main.askPlayerMove3))
                        GHC.Types.True
                   1#
                   -> GHC.IO.Handle.Text.hPutStr'
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           Main.askPlayerMove5
                           (GHC.Base.++ @ GHC.Types.Char w Main.askPlayerMove1))
                        GHC.Types.True }) -}
122616fe007c8396800867fb884d8240
  $wcheckCapturedKing ::
    ChessBoard.Pieces
    -> ChessBoard.Pieces -> GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,1*U><S,1*U>,
     Inline: [2],
     Unfolding: (\ (ww :: ChessBoard.Pieces)
                   (ww1 :: ChessBoard.Pieces)
                   (ww2 :: GHC.Prim.Int#) ->
                 case ww2 of wild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case GHC.List.elem
                             @ ChessBoard.ChessPiece
                             ChessBoard.$fEqChessPiece
                             ChessBoard.King
                             ww of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False }
                   2#
                   -> case GHC.List.elem
                             @ ChessBoard.ChessPiece
                             ChessBoard.$fEqChessPiece
                             ChessBoard.King
                             ww1 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } }) -}
9d4864a985ce215daf384acd7beab4ba
  $wcongratsString ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Prim.Int# -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U><L,1*U><S,1*U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Prim.Int#) ->
                 case ww2 of wild {
                   DEFAULT -> Main.congratsString5
                   1#
                   -> GHC.CString.unpackAppendCString#
                        Main.congratsString4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           ww1
                           (GHC.CString.unpackAppendCString#
                              Main.congratsString3
                              (GHC.Base.++ @ GHC.Types.Char ww Main.congratsString1)))
                   2#
                   -> GHC.CString.unpackAppendCString#
                        Main.congratsString4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           ww
                           (GHC.CString.unpackAppendCString#
                              Main.congratsString3
                              (GHC.Base.++ @ GHC.Types.Char ww1 Main.congratsString1))) }) -}
c120143a17deac452b250b4a615aa107
  $wextractMove ::
    GHC.Base.String -> (# ChessBoard.Location, ChessBoard.Location #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 (# case Main.$wextractSingleMove
                           (GHC.List.$wunsafeTake
                              @ GHC.Types.Char
                              2#
                              w) of ww { (#,#) ww1 ww2 ->
                    ChessBoard.Location ww1 ww2 },
                    case Main.$wextractSingleMove
                           (GHC.List.reverse1
                              @ GHC.Types.Char
                              (GHC.List.$wunsafeTake
                                 @ GHC.Types.Char
                                 2#
                                 (GHC.List.reverse1
                                    @ GHC.Types.Char
                                    w
                                    (GHC.Types.[] @ GHC.Types.Char)))
                              (GHC.Types.[] @ GHC.Types.Char)) of ww { (#,#) ww1 ww2 ->
                    ChessBoard.Location ww1 ww2 } #)) -}
17e82fc1f1f1648dfbca3487dbe54d88
  $wextractSingleMove ::
    GHC.Base.String -> (# ChessBoard.ColLoc, ChessBoard.RowLoc #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 (# case GHC.List.$w!!
                           @ GHC.Types.Char
                           w
                           0# of ww { GHC.Types.C# ww1 ->
                    case {__pkg_ccall base-4.12.0.0 GHC.Prim.Int#
                                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          GHC.Prim.Int# #)}
                           (GHC.Prim.ord# ww1)
                           GHC.Prim.realWorld# of wild { (#,#) ds ds1 ->
                    case GHC.Prim.leWord# (GHC.Prim.int2Word# ds1) 1114111## of lwild {
                      DEFAULT -> case GHC.Char.$wlvl ds1 ret_ty ChessBoard.ColLoc of {}
                      1# -> GHC.Types.I# (GHC.Prim.-# ds1 65#) } } },
                    case GHC.List.$w!!
                           @ GHC.Types.Char
                           w
                           1# of ww { GHC.Types.C# ww1 ->
                    case {__pkg_ccall base-4.12.0.0 GHC.Prim.Int#
                                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          GHC.Prim.Int# #)}
                           (GHC.Prim.ord# ww1)
                           GHC.Prim.realWorld# of wild { (#,#) ds ds1 ->
                    case GHC.Prim.leWord# (GHC.Prim.int2Word# ds1) 1114111## of lwild {
                      DEFAULT -> case GHC.Char.$wlvl ds1 ret_ty ChessBoard.RowLoc of {}
                      1# -> GHC.Types.I# (GHC.Prim.-# ds1 49#) } } } #)) -}
ae8768e07d0b631dcda329f3165ff579
  $wgameOver ::
    ChessBoard.Board
    -> ChessBoard.Player
    -> ChessBoard.Player
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S,U><L,1*U(1*U,A,A,A,A)><L,1*U(1*U,A,A,A,A)><L,U(U)><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: ChessBoard.Board)
                   (ww1 :: ChessBoard.Player)
                   (ww2 :: ChessBoard.Player)
                   (w :: GHC.Types.Int)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   gameFinished :: ChessBoard.GameOver
                   = ChessBoard.$wisGameOver ww (ChessBoard.turnToColor w)
                 } in
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #) <join 0>
                   = case gameFinished of wild {
                       DEFAULT -> (# w1, GHC.Tuple.() #)
                       ChessBoard.StaleMate
                       -> case (GHC.IO.Handle.Text.hPutStr'
                                  GHC.IO.Handle.FD.stdout
                                  (case ww1 of ww3 { ChessBoard.Player ww4 ww5 ww6 ww7 ww8 ->
                                   case ww2 of ww9 { ChessBoard.Player ww10 ww11 ww12 ww13 ww14 ->
                                   Main.$wstalelmateString ww4 ww10 } })
                                  GHC.Types.True)
                                 `cast`
                               (GHC.Types.N:IO[0] <()>_R)
                                 w1 of ds1 { (#,#) ipv ipv1 ->
                          System.Exit.exitSuccess1 @ () ipv } }
                 } in
                 case gameFinished of wild {
                   ChessBoard.CheckMate
                   -> case (GHC.IO.Handle.Text.hPutStr'
                              GHC.IO.Handle.FD.stdout
                              (case ww1 of ww3 { ChessBoard.Player ww4 ww5 ww6 ww7 ww8 ->
                               case ww2 of ww9 { ChessBoard.Player ww10 ww11 ww12 ww13 ww14 ->
                               case w of ww15 { GHC.Types.I# ww16 ->
                               Main.$wcongratsString ww4 ww10 ww16 } } })
                              GHC.Types.True)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             w1 of ds1 { (#,#) ipv ipv1 ->
                      System.Exit.exitSuccess1 @ () ipv }
                   ChessBoard.StaleMate -> $j
                   ChessBoard.Unfinished -> $j }) -}
b0a1d8f1ce77c2b573a32838f9f61c00
  $wgetPlayerMove ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (ChessBoard.Location, ChessBoard.Location) #)
  {- Arity: 4, Strictness: <L,U><L,U><S,U><S,U>, Inline: [2] -}
e0dd3d4e721a62b1222ba5092c1a0847
  $wrunGame ::
    ChessBoard.Board
    -> ChessBoard.Player
    -> ChessBoard.Player
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U,U,U,U(U))><L,U(U,U,U,U,U(U))><L,U(U)><S,U><L,1*U><S,U>,
     Inline: [2] -}
7bb085825c07d1abc3234f613d06c522
  $wstalelmateString ::
    GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Base.String) (ww1 :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   Main.gameOver5
                   (GHC.Base.++
                      @ GHC.Types.Char
                      ww
                      (GHC.CString.unpackAppendCString#
                         Main.gameOver4
                         (GHC.Base.++ @ GHC.Types.Char ww1 Main.gameOver2)))) -}
e521623a90a33c60188db7e093fa46cc
  $wupdateAll ::
    ChessBoard.Player
    -> ChessBoard.Player
    -> ChessBoard.Board
    -> GHC.Maybe.Maybe ChessBoard.Piece
    -> GHC.Types.Int
    -> (# ChessBoard.Board, ChessBoard.Player, ChessBoard.Player #)
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U(U))><L,U(U,U,U,U,U(U))><L,U><S,1*U><L,1*U(1*U)>,
     Inline: [2],
     Unfolding: (\ (ww :: ChessBoard.Player)
                   (ww1 :: ChessBoard.Player)
                   (ww2 :: ChessBoard.Board)
                   (ww3 :: GHC.Maybe.Maybe ChessBoard.Piece)
                   (w :: GHC.Types.Int) ->
                 case ww3 of wild {
                   GHC.Maybe.Nothing -> (# ww2, ww, ww1 #)
                   GHC.Maybe.Just ipv
                   -> case ipv of wild1 { ChessBoard.Piece ds cp ->
                      case w of wild2 { GHC.Types.I# ds1 ->
                      case ds1 of ds2 {
                        DEFAULT
                        -> (# ww2, ChessBoard.updateActive ww cp,
                              case ww1 of wild3 { ChessBoard.Player ds3 ds4 ds5 ds6 ds7 ->
                              ChessBoard.Player
                                ds3
                                ds4
                                (GHC.Types.: @ ChessBoard.ChessPiece cp ds5)
                                ds6
                                (case ds7 of wild4 { GHC.Types.I# x ->
                                 case cp of wild5 {
                                   ChessBoard.Pawn -> GHC.Types.I# (GHC.Prim.+# x 1#)
                                   ChessBoard.Bishop -> GHC.Types.I# (GHC.Prim.+# x 3#)
                                   ChessBoard.Knight -> GHC.Types.I# (GHC.Prim.+# x 3#)
                                   ChessBoard.Rook -> GHC.Types.I# (GHC.Prim.+# x 5#)
                                   ChessBoard.Queen -> GHC.Types.I# (GHC.Prim.+# x 9#)
                                   ChessBoard.King -> GHC.Types.I# (GHC.Prim.+# x 10#) } }) } #)
                        1#
                        -> (# ww2,
                              case ww of wild3 { ChessBoard.Player ds3 ds4 ds5 ds6 ds7 ->
                              ChessBoard.Player
                                ds3
                                ds4
                                (GHC.Types.: @ ChessBoard.ChessPiece cp ds5)
                                ds6
                                (case ds7 of wild4 { GHC.Types.I# x ->
                                 case cp of wild5 {
                                   ChessBoard.Pawn -> GHC.Types.I# (GHC.Prim.+# x 1#)
                                   ChessBoard.Bishop -> GHC.Types.I# (GHC.Prim.+# x 3#)
                                   ChessBoard.Knight -> GHC.Types.I# (GHC.Prim.+# x 3#)
                                   ChessBoard.Rook -> GHC.Types.I# (GHC.Prim.+# x 5#)
                                   ChessBoard.Queen -> GHC.Types.I# (GHC.Prim.+# x 9#)
                                   ChessBoard.King -> GHC.Types.I# (GHC.Prim.+# x 10#) } }) },
                              ChessBoard.updateActive ww1 cp #) } } } }) -}
954981f92eea290910e54bec2241f9d9
  askPlayerMove ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,1*U><L,1*U><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Main.$waskPlayerMove w w1 ww1 }) -}
6cb1093b09a8a9bee40b1a0532e23982
  askPlayerMove1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.askPlayerMove2) -}
bad234bbb3dde5ee075b7a1f87c04e67
  askPlayerMove2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (". You are playing as White."#) -}
c464803e82a74dd451e463e456b5b4bd
  askPlayerMove3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.askPlayerMove4) -}
19db93e674463e4dffcfd4fb642a5408
  askPlayerMove4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (". You are playing as Black."#) -}
fcbcbcfc905fe19cbab6b54300b9613e
  askPlayerMove5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Your move "#) -}
3db34a7cefa2e5896f74536071961385
  checkCapturedKing ::
    ChessBoard.Game -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSS),1*U(A,1*U(A,A,A,1*U,A),1*U(A,A,A,1*U,A))><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: ChessBoard.Game) (w1 :: GHC.Types.Int) ->
                 case w of ww { ChessBoard.Game ww1 ww2 ww3 ->
                 case ww2 of ww4 { ChessBoard.Player ww5 ww6 ww7 ww8 ww9 ->
                 case ww3 of ww10 { ChessBoard.Player ww11 ww12 ww13 ww14 ww15 ->
                 case w1 of ww16 { GHC.Types.I# ww17 ->
                 Main.$wcheckCapturedKing ww8 ww14 ww17 } } } }) -}
6e0557cc8fa5bfe2f57f4ea34af7c1a1
  checkMoveInput :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (move :: GHC.Base.String) ->
                 case GHC.List.$w!!
                        @ GHC.Types.Char
                        move
                        1# of ww { GHC.Types.C# ww1 ->
                 case {__pkg_ccall base-4.12.0.0 GHC.Prim.Int#
                                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Prim.Int# #)}
                        (GHC.Prim.ord# ww1)
                        GHC.Prim.realWorld# of wild { (#,#) ds ds1 ->
                 case GHC.Prim.leWord# (GHC.Prim.int2Word# ds1) 1114111## of lwild {
                   DEFAULT -> case GHC.Char.$wlvl ds1 ret_ty GHC.Types.Bool of {}
                   1#
                   -> case GHC.Prim.<# ds1 49# of lwild1 {
                        DEFAULT
                        -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.Int#
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Prim.Int# #)}
                                  (GHC.Prim.ord# ww1)
                                  GHC.Prim.realWorld# of wild1 { (#,#) ds2 ds3 ->
                           case GHC.Prim.leWord#
                                  (GHC.Prim.int2Word# ds3)
                                  1114111## of lwild2 {
                             DEFAULT -> case GHC.Char.$wlvl ds3 ret_ty GHC.Types.Bool of {}
                             1#
                             -> case GHC.Prim.># ds3 56# of lwild3 {
                                  DEFAULT
                                  -> case GHC.List.$w!!
                                            @ GHC.Types.Char
                                            move
                                            0# of ww2 { GHC.Types.C# ww3 ->
                                     case {__pkg_ccall base-4.12.0.0 GHC.Prim.Int#
                                                                     -> GHC.Prim.State#
                                                                          GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           GHC.Prim.Int# #)}
                                            (GHC.Prim.ord# ww3)
                                            GHC.Prim.realWorld# of wild2 { (#,#) ds4 ds5 ->
                                     case GHC.Prim.leWord#
                                            (GHC.Prim.int2Word# ds5)
                                            1114111## of lwild4 {
                                       DEFAULT
                                       -> case GHC.Char.$wlvl ds5 ret_ty GHC.Types.Bool of {}
                                       1#
                                       -> case GHC.Prim.<# ds5 65# of lwild5 {
                                            DEFAULT
                                            -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.Int#
                                                                               -> GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld
                                                                               -> (# GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld,
                                                                                     GHC.Prim.Int# #)}
                                                      (GHC.Prim.ord# ww3)
                                                      GHC.Prim.realWorld# of wild3 { (#,#) ds6 ds7 ->
                                               case GHC.Prim.leWord#
                                                      (GHC.Prim.int2Word# ds7)
                                                      1114111## of lwild6 {
                                                 DEFAULT
                                                 -> case GHC.Char.$wlvl ds7
                                                    ret_ty GHC.Types.Bool
                                                    of {}
                                                 1#
                                                 -> case GHC.Prim.># ds7 72# of lwild7 {
                                                      DEFAULT -> GHC.Types.True
                                                      1# -> GHC.Types.False } } }
                                            1# -> GHC.Types.False } } } }
                                  1# -> GHC.Types.False } } }
                        1# -> GHC.Types.False } } } }) -}
0ef07c2c20f33e2effac2a3a5c945572
  checkPlayerMove :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (inputs :: GHC.Base.String) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char inputs 0# of ww2 {
                   DEFAULT -> GHC.Types.False
                   5#
                   -> case GHC.List.$w!!
                             @ GHC.Types.Char
                             inputs
                             2# of wild { GHC.Types.C# x ->
                      case x of wild1 {
                        DEFAULT -> GHC.Types.False
                        ' '#
                        -> case Main.checkMoveInput
                                  (GHC.List.$wunsafeTake @ GHC.Types.Char 2# inputs) of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> Main.checkMoveInput
                                  (GHC.List.reverse1
                                     @ GHC.Types.Char
                                     (GHC.List.$wunsafeTake
                                        @ GHC.Types.Char
                                        2#
                                        (GHC.List.reverse1
                                           @ GHC.Types.Char
                                           inputs
                                           (GHC.Types.[] @ GHC.Types.Char)))
                                     (GHC.Types.[] @ GHC.Types.Char)) } } } }) -}
62e627952fd72595e4b0430ec5909c4c
  congratsString ::
    ChessBoard.Game -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 2,
     Strictness: <S(LSS),1*U(A,1*U(1*U,A,A,A,A),1*U(1*U,A,A,A,A))><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: ChessBoard.Game) (w1 :: GHC.Types.Int) ->
                 case w of ww { ChessBoard.Game ww1 ww2 ww3 ->
                 case ww2 of ww4 { ChessBoard.Player ww5 ww6 ww7 ww8 ww9 ->
                 case ww3 of ww10 { ChessBoard.Player ww11 ww12 ww13 ww14 ww15 ->
                 case w1 of ww16 { GHC.Types.I# ww17 ->
                 Main.$wcongratsString ww5 ww11 ww17 } } } }) -}
d9919c06013668e0c6ce10b035773a5e
  congratsString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.congratsString2) -}
7e7de37a0305b656709475f422ab2146
  congratsString2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" in your game of chess!"#) -}
1e70bc670de84d5ff8efc83bcbebf772
  congratsString3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (". You have beaten "#) -}
d8d734cd76d9e4662759fca5d9bd41ea
  congratsString4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Congrats "#) -}
d3345bd75d9ed17ae3fbcebaa77ee9b9
  congratsString5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.congratsString6) -}
1d03950df36fc0d9e5a93ab2bc7f77bc
  congratsString6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Neither player wins. What is happening?"#) -}
6b6c1b01181939215acf97fb054b612d
  extractMove ::
    GHC.Base.String -> (ChessBoard.Location, ChessBoard.Location)
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case Main.$wextractMove w of ww { (#,#) ww1 ww2 -> (ww1, ww2) }) -}
58616f5c8bf30d619a3e312d22419141
  extractSingleMove :: GHC.Base.String -> ChessBoard.Location
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case Main.$wextractSingleMove w of ww { (#,#) ww1 ww2 ->
                 ChessBoard.Location ww1 ww2 }) -}
a0eb8a78f6825730199e9ce6e19e1724
  gameOver :: ChessBoard.Game -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(SLL),1*U(U,1*U(1*U,A,A,A,A),1*U(1*U,A,A,A,A))><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameOver1
                  `cast`
                (<ChessBoard.Game>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
1e07e226bcf5453d3d33faa3f1054714
  gameOver1 ::
    ChessBoard.Game
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(SLL),1*U(U,1*U(1*U,A,A,A,A),1*U(1*U,A,A,A,A))><L,U(U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: ChessBoard.Game)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { ChessBoard.Game ww1 ww2 ww3 ->
                 Main.$wgameOver ww1 ww2 ww3 w1 w2 }) -}
109d77ae703647b2acf0d4c043a19018
  gameOver2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.gameOver3) -}
ceceab6837f26b859247d91864b64b43
  gameOver3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("."#) -}
afd7a4d65b2a3f1d86d97942fc51edcb
  gameOver4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" and "#) -}
8da8621ededfa5141854880ac72e1880
  gameOver5 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Boo, you have reached a stalemate. Enjoy your tie "#) -}
db21531c3f570a5a8756470c7d5369ee
  getPawnPromotion :: GHC.Types.IO ChessBoard.ChessPiece
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getPawnPromotion1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <ChessBoard.ChessPiece>_R)) -}
54da269faab8b7bd0a666718368421e2
  getPawnPromotion1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ChessBoard.ChessPiece #)
  {- Arity: 1, Strictness: <S,U> -}
1b125198fa314792015196754d324a9e
  getPlayerMove ::
    ChessBoard.Game
    -> GHC.Types.Int
    -> GHC.Types.IO (ChessBoard.Location, ChessBoard.Location)
  {- Arity: 3,
     Strictness: <S(LSS),1*U(A,1*U(U,A,A,A,A),1*U(U,A,A,A,A))><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getPlayerMove1
                  `cast`
                (<ChessBoard.Game>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <(ChessBoard.Location, ChessBoard.Location)>_R)) -}
e53204e9051220978037222263d77116
  getPlayerMove1 ::
    ChessBoard.Game
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (ChessBoard.Location, ChessBoard.Location) #)
  {- Arity: 3,
     Strictness: <S(LSS),1*U(A,1*U(U,A,A,A,A),1*U(U,A,A,A,A))><S(S),1*U(U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: ChessBoard.Game)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { ChessBoard.Game ww1 ww2 ww3 ->
                 case ww2 of ww4 { ChessBoard.Player ww5 ww6 ww7 ww8 ww9 ->
                 case ww3 of ww10 { ChessBoard.Player ww11 ww12 ww13 ww14 ww15 ->
                 case w1 of ww16 { GHC.Types.I# ww17 ->
                 Main.$wgetPlayerMove ww5 ww11 ww17 w2 } } } }) -}
b49bbbfda4785d07868e3abaa6d867cf
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
35af3a8d1a5582aac164bf6d78cbcb5a
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.hSetBuffering1
                        GHC.IO.Handle.FD.stdout
                        GHC.IO.Handle.Types.NoBuffering
                        s of ds1 { (#,#) ipv ipv1 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main9
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main7
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main5
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main3
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 Main.$wrunGame
                   ChessBoard.startBoard
                   (ChessBoard.Player
                      ipv7
                      ChessBoard.White
                      (GHC.Types.[] @ ChessBoard.ChessPiece)
                      ChessBoard.blackPlayer1
                      ChessBoard.$fShowPlayer2)
                   (ChessBoard.Player
                      ipv11
                      ChessBoard.Black
                      (GHC.Types.[] @ ChessBoard.ChessPiece)
                      ChessBoard.blackPlayer1
                      ChessBoard.$fShowPlayer2)
                   Main.main2
                   0#
                   (GHC.Types.[] @ GHC.Types.Char)
                   ipv12 } } } } } } }) -}
fa8eb94c2f87a6a5350e5c64aad923ed
  main10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Haskell Chess"#) -}
f9de0ccd3b7ad8d68b62d9fa2abebaee
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
c2454a7837b4f4ae836aaed13c5b720a
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
f235ed0bea82dae85a13c2a238743e0f
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main4) -}
99cd9ec1269a1ed245a56d3d4779e072
  main4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("When it is your turn, specify moves by two characters of column row for start, and then two characters for column and row as end. Example: A3 C5"#) -}
93bd6909d35ac461ea86a6aa3e2c27ba
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main6) -}
2f5f92edbb9386a2cc640788ca4de06b
  main6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("What is the name of Player 2 (Black)?"#) -}
05fb29911961e4d91ca9fa1307c5e984
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main8) -}
91fbfac07446307043d03e1430d25599
  main8 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("What is the name of Player 1 (White)?"#) -}
d4223d095f9f1ca9c6d528fe5ea0c88e
  main9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main10) -}
e2acd056b66076197c75dd944f725a84
  makeMove ::
    ChessBoard.Game
    -> ChessBoard.Location
    -> ChessBoard.Location
    -> GHC.Types.Int
    -> ChessBoard.Game
  {- Arity: 4,
     Strictness: <S(SLL),1*U(U,U(U,U,U,U,U(U)),U(U,U,U,U,U(U)))><L,1*U(U(U),U(U))><S(S(S)S(S)),1*U(1*U(U),1*U(U))><L,1*U(1*U)>m,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: ChessBoard.Game)
                   (w1 :: ChessBoard.Location)
                   (w2 :: ChessBoard.Location)
                   (w3 :: GHC.Types.Int) ->
                 case w of ww { ChessBoard.Game ww1 ww2 ww3 ->
                 case w2 of ww4 { ChessBoard.Location ww5 ww6 ->
                 case ww5 of ww7 { GHC.Types.I# ww8 ->
                 case ww6 of ww9 { GHC.Types.I# ww10 ->
                 case ChessBoard.$wupdateBoard
                        ww1
                        w1
                        ww8
                        ww10 of ww11 { (#,#) ww12 ww13 ->
                 case Main.$wupdateAll
                        ww2
                        ww3
                        ww12
                        ww13
                        w3 of ww14 { (#,,#) ww15 ww16 ww17 ->
                 ChessBoard.Game ww15 ww16 ww17 } } } } } }) -}
4e35584cd8a2a8699c614284180ded90
  nextTurn :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# ds1 ->
                 case ds1 of ds2 {
                   DEFAULT -> Main.main2 1# -> Main.nextTurn1 } }) -}
58bc7dd6c799b7870dea52a82b9ee008
  nextTurn1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
cdd8c64113fdd94985cdd5ffe0a8109e
  runGame ::
    ChessBoard.Game
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <S,1*U(U,U(U,U,U,U,U(U)),U(U,U,U,U,U(U)))><L,U(U)><S(S),1*U(U)><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.runGame1
                  `cast`
                (<ChessBoard.Game>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
0889fd666e0a24ed3873b80dc103753e
  runGame1 ::
    ChessBoard.Game
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S,1*U(U,U(U,U,U,U,U(U)),U(U,U,U,U,U(U)))><L,U(U)><S(S),1*U(U)><L,1*U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: ChessBoard.Game)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Base.String)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { ChessBoard.Game ww1 ww2 ww3 ->
                 case w2 of ww4 { GHC.Types.I# ww5 ->
                 Main.$wrunGame ww1 ww2 ww3 w1 ww5 w3 w4 } }) -}
51aaa66fa0135dab513e80616c1f04fe
  stalelmateString :: ChessBoard.Game -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S(LSS),1*U(A,1*U(1*U,A,A,A,A),1*U(1*U,A,A,A,A))>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ChessBoard.Game) ->
                 case w of ww { ChessBoard.Game ww1 ww2 ww3 ->
                 case ww2 of ww4 { ChessBoard.Player ww5 ww6 ww7 ww8 ww9 ->
                 case ww3 of ww10 { ChessBoard.Player ww11 ww12 ww13 ww14 ww15 ->
                 Main.$wstalelmateString ww5 ww11 } } }) -}
58366d75059d011866afb39957a4f3e4
  updateAll ::
    ChessBoard.Game
    -> (ChessBoard.Board, GHC.Maybe.Maybe ChessBoard.Piece)
    -> GHC.Types.Int
    -> ChessBoard.Game
  {- Arity: 3,
     Strictness: <S,1*U(A,U(U,U,U,U,U(U)),U(U,U,U,U,U(U)))><S(LS),1*U(U,1*U)><L,1*U(1*U)>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: ChessBoard.Game)
                   (w1 :: (ChessBoard.Board, GHC.Maybe.Maybe ChessBoard.Piece))
                   (w2 :: GHC.Types.Int) ->
                 case w of ww { ChessBoard.Game ww1 ww2 ww3 ->
                 case w1 of ww4 { (,) ww5 ww6 ->
                 case Main.$wupdateAll
                        ww2
                        ww3
                        ww5
                        ww6
                        w2 of ww7 { (#,,#) ww8 ww9 ww10 ->
                 ChessBoard.Game ww8 ww9 ww10 } } }) -}
32f89d339c22a8db42ac9ad8fa8de922
  validPawnPromote ::
    GHC.Base.String
    -> (GHC.Types.Bool, GHC.Maybe.Maybe ChessBoard.ChessPiece)
  {- Arity: 1, Strictness: <S,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case GHC.Base.eqString w Main.validPawnPromote14 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString w Main.validPawnPromote12 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString w Main.validPawnPromote10 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString w Main.validPawnPromote8 of wild3 {
                                  GHC.Types.False
                                  -> case GHC.Base.eqString w Main.validPawnPromote6 of wild4 {
                                       GHC.Types.False
                                       -> (GHC.Types.False,
                                           GHC.Maybe.Nothing @ ChessBoard.ChessPiece)
                                       GHC.Types.True -> (GHC.Types.True, Main.validPawnPromote5) }
                                  GHC.Types.True -> (GHC.Types.True, Main.validPawnPromote4) }
                             GHC.Types.True -> (GHC.Types.True, Main.validPawnPromote3) }
                        GHC.Types.True -> (GHC.Types.True, Main.validPawnPromote2) }
                   GHC.Types.True -> (GHC.Types.True, Main.validPawnPromote1) }) -}
60a87b3e38cd2e595c2ab5e096c5dbed
  validPawnPromote1 :: GHC.Maybe.Maybe ChessBoard.ChessPiece
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ ChessBoard.ChessPiece
                   ChessBoard.Pawn) -}
771ae175b0b88fec33660e9d798c5da8
  validPawnPromote10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.validPawnPromote11) -}
448995565dcb85fd66186de18874baec
  validPawnPromote11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bishop"#) -}
5d5e47ffa4f8c029b2f99f8d8db7e383
  validPawnPromote12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.validPawnPromote13) -}
3de7cedbba7e8f4a41e30aac2e385456
  validPawnPromote13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Knight"#) -}
0a21ea0a9e401fc44a541b50bf997b49
  validPawnPromote14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.validPawnPromote15) -}
e53922ccfb8a0f664bb01aaf4ca8032f
  validPawnPromote15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Pawn"#) -}
12ce1a80cd4a96e3e6c6abbb261aa175
  validPawnPromote2 :: GHC.Maybe.Maybe ChessBoard.ChessPiece
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ ChessBoard.ChessPiece
                   ChessBoard.Knight) -}
7de8ae93411dc5f403aec2c654b84036
  validPawnPromote3 :: GHC.Maybe.Maybe ChessBoard.ChessPiece
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ ChessBoard.ChessPiece
                   ChessBoard.Bishop) -}
97008887a53c701445e72911ffaa8f63
  validPawnPromote4 :: GHC.Maybe.Maybe ChessBoard.ChessPiece
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ ChessBoard.ChessPiece
                   ChessBoard.Rook) -}
b4b6326e9023a537a65b42ff6ed7dcbb
  validPawnPromote5 :: GHC.Maybe.Maybe ChessBoard.ChessPiece
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ ChessBoard.ChessPiece
                   ChessBoard.Queen) -}
7c9ba9dfba2dfa15cd5caa3bb419821a
  validPawnPromote6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.validPawnPromote7) -}
95331cce2af1f06e09dd98d3d28b388d
  validPawnPromote7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Queen"#) -}
b07e670dff26b4a60e4866c9be914279
  validPawnPromote8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.validPawnPromote9) -}
23817568a01af985a4c548ccb003d424
  validPawnPromote9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Rook"#) -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

