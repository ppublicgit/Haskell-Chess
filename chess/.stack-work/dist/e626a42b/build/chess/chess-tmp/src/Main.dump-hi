
==================== FINAL INTERFACE ====================
2020-05-15 17:38:13.4727842 UTC

interface main:Main 8065
  interface hash: 32d27b6e34dcfe85f88799ef97debf5d
  ABI hash: f83d341f0635364b795fbc6411d923bf
  export-list hash: e481ee0088673d2f07d28121e7c289ef
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: bef422581fa38d9832384f2c31c27385
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.askPlayerMove
  Main.checkCapturedKing
  Main.checkMoveInput
  Main.checkPlayerMove
  Main.congratsString
  Main.extractMove
  Main.extractSingleMove
  Main.gameOver
  Main.getPawnPromotion
  Main.getPlayerMove
  Main.main
  Main.makeMove
  Main.nextTurn
  Main.runGame
  Main.stalelmateString
  Main.updateAll
  Main.validPawnPromote
module dependencies: ChessBoard
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Data.Char 1b375a88c42d83fdb0075d9bd7d91b40
import  -/  base-4.12.0.0:Data.Foldable bdeac546b12282c8986759606b9295a5
import  -/  base-4.12.0.0:Data.List 6c60559263db7cf0f22549b9673785b9
import  -/  base-4.12.0.0:Data.Maybe d07d5847f427040b05c592631bb0d4af
import  -/  base-4.12.0.0:Data.Tuple 3bf97d65c8e783335a95628f6e4f6f75
import  -/  base-4.12.0.0:GHC.Base fbe365a916ebeeeb4bc1f895dbe83e42
import  -/  base-4.12.0.0:GHC.IO.Handle 5b3f689b082eee6e7562e9b58323b91a
import  -/  base-4.12.0.0:GHC.IO.Handle.FD 5b13f4cf43b26c3d52e20458852a8546
import  -/  base-4.12.0.0:GHC.IO.Handle.Types b0667350495b7969f4b13a8e9686d1b4
import  -/  base-4.12.0.0:GHC.List bb56c56a8dc21963b5824914872db158
import  -/  base-4.12.0.0:GHC.Num 8203d3fee487126cffd5e55ba5d0e8c3
import  -/  base-4.12.0.0:GHC.Unicode 83c3eb852482283851a887a8599902d0
import  -/  base-4.12.0.0:Prelude 80c668cb99fbafebd524c5e897f8c982
import  -/  base-4.12.0.0:System.Exit e7f5ab9b9f84f654c1856120513bc8bb
import  -/  base-4.12.0.0:System.IO 51ffc52e2e8495d5c7b596557cf2be89
import  -/  ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  ChessBoard 3f9b5483cd70d0a9ffc4a827b768dc8f
  exports: c5512351b16360e77801c2cd12c1efd4
  Bishop 8cd69cbd4bde0c0174dd79eb382ad36d
  Board 57501d93c380cd4278b7670c78ec4e12
  CheckMate 980c8c28df3c628df59d7faa68107aea
  ChessPiece 51607fc8dbe32561da396ec7bbcc0615
  Game b719dbfbdf494fd45a97301685eb14a0
  Game bfce426340fad4ef427fa95511c74a14
  King e59ff3e330291fe93441185f8b95007c
  Knight 7667520dcdae37e771e16c8985dc4129
  Location e477d0b2145f375df518bf44dd39364c
  Location 61763d609e56610dc321c7932fa09a95
  Pawn 448d1465be3a87d56f402d8bab3612a4
  Piece 031e9d7fb28b18d1706ba77c48ecb237
  Piece 1911fdf70f07e10faf3d52dd1b71ed25
  Player 2fc6af245bff4db23f141cbefc722367
  Queen f1f4f4ee781b06c3552c4e82477c8897
  Rook 52361a719a7016fb1a72117f120f0a4c
  StaleMate 6e146ad52725db66b330832af08313b0
  blackPlayer b531c804088004af26ea4a23f791f227
  checkPawnPromotion d7c1e8840b21a9c0efbd69a3a095af1d
  game bb000d47073b5e63790b844cc0bfab57
  isGameOver 71aa2f0d078a4511fc20be637942e68d
  isValidPlayerMove a216f2c1a3874d227ef0bd318e2db373
  pieceValue d8c7920426b48b587948e345293cbcf9
  printBoard a2a68efcecfad83c26ec5cf9dc7447ec
  promotePawn 01b20d1a25e9b44ac51326028fe120ff
  turnToColor 9acd37a1208b6cb0b923758d053b1530
  updateActive 715d7b2b85ae237ca3ec43a6f41679dc
  updateBoard a1b87ecb7d2c3b18cfa76cd24afe640d
  updateCaptured a89c4acf0164f93cd8c33751efa62cd3
  updateGameBoard d87bbe482ebdd9fa8f04e7c54ac6fba4
  updateGamePlayers cdc837c4c440d0efcfc9e1c1061c909a
  updatePlayerName f7c64f68f88c66a1b46df2e4a3a8b5b7
  updateScore a5ff1054b310c310bc1920bb6e19c14e
  whitePlayer 9616d8f7a4a4971dd577fe8568e08537
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
54892a70bf640d476551e228164c636e
  $waskPlayerMove ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Prim.Int# -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,1*U><L,1*U><S,1*U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (ww :: GHC.Prim.Int#) ->
                 case ww of wild {
                   DEFAULT
                   -> GHC.IO.Handle.Text.hPutStr'
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           Main.askPlayerMove5
                           (GHC.Base.++ @ GHC.Types.Char w1 Main.askPlayerMove3))
                        GHC.Types.True
                   1#
                   -> GHC.IO.Handle.Text.hPutStr'
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           Main.askPlayerMove5
                           (GHC.Base.++ @ GHC.Types.Char w Main.askPlayerMove1))
                        GHC.Types.True }) -}
a9e9db4c7b180e2cc27782ba0e9a06c9
  $wcheckCapturedKing ::
    ChessBoard.Pieces
    -> ChessBoard.Pieces -> GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,1*U><S,1*U>,
     Inline: [2],
     Unfolding: (\ (ww :: ChessBoard.Pieces)
                   (ww1 :: ChessBoard.Pieces)
                   (ww2 :: GHC.Prim.Int#) ->
                 case ww2 of wild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case GHC.List.elem
                             @ ChessBoard.ChessPiece
                             ChessBoard.$fEqChessPiece
                             ChessBoard.King
                             ww of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False }
                   2#
                   -> case GHC.List.elem
                             @ ChessBoard.ChessPiece
                             ChessBoard.$fEqChessPiece
                             ChessBoard.King
                             ww1 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } }) -}
9d4864a985ce215daf384acd7beab4ba
  $wcongratsString ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Prim.Int# -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U><L,1*U><S,1*U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Prim.Int#) ->
                 case ww2 of wild {
                   DEFAULT -> Main.congratsString5
                   1#
                   -> GHC.CString.unpackAppendCString#
                        Main.congratsString4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           ww1
                           (GHC.CString.unpackAppendCString#
                              Main.congratsString3
                              (GHC.Base.++ @ GHC.Types.Char ww Main.congratsString1)))
                   2#
                   -> GHC.CString.unpackAppendCString#
                        Main.congratsString4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           ww
                           (GHC.CString.unpackAppendCString#
                              Main.congratsString3
                              (GHC.Base.++ @ GHC.Types.Char ww1 Main.congratsString1))) }) -}
c120143a17deac452b250b4a615aa107
  $wextractMove ::
    GHC.Base.String -> (# ChessBoard.Location, ChessBoard.Location #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 (# case Main.$wextractSingleMove
                           (GHC.List.$wunsafeTake
                              @ GHC.Types.Char
                              2#
                              w) of ww { (#,#) ww1 ww2 ->
                    ChessBoard.Location ww1 ww2 },
                    case Main.$wextractSingleMove
                           (GHC.List.reverse1
                              @ GHC.Types.Char
                              (GHC.List.$wunsafeTake
                                 @ GHC.Types.Char
                                 2#
                                 (GHC.List.reverse1
                                    @ GHC.Types.Char
                                    w
                                    (GHC.Types.[] @ GHC.Types.Char)))
                              (GHC.Types.[] @ GHC.Types.Char)) of ww { (#,#) ww1 ww2 ->
                    ChessBoard.Location ww1 ww2 } #)) -}
17e82fc1f1f1648dfbca3487dbe54d88
  $wextractSingleMove ::
    GHC.Base.String -> (# ChessBoard.ColLoc, ChessBoard.RowLoc #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 (# case GHC.List.$w!!
                           @ GHC.Types.Char
                           w
                           0# of ww { GHC.Types.C# ww1 ->
                    case {__pkg_ccall base-4.12.0.0 GHC.Prim.Int#
                                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          GHC.Prim.Int# #)}
                           (GHC.Prim.ord# ww1)
                           GHC.Prim.realWorld# of wild { (#,#) ds ds1 ->
                    case GHC.Prim.leWord# (GHC.Prim.int2Word# ds1) 1114111## of lwild {
                      DEFAULT -> case GHC.Char.$wlvl ds1 ret_ty ChessBoard.ColLoc of {}
                      1# -> GHC.Types.I# (GHC.Prim.-# ds1 65#) } } },
                    case GHC.List.$w!!
                           @ GHC.Types.Char
                           w
                           1# of ww { GHC.Types.C# ww1 ->
                    case {__pkg_ccall base-4.12.0.0 GHC.Prim.Int#
                                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          GHC.Prim.Int# #)}
                           (GHC.Prim.ord# ww1)
                           GHC.Prim.realWorld# of wild { (#,#) ds ds1 ->
                    case GHC.Prim.leWord# (GHC.Prim.int2Word# ds1) 1114111## of lwild {
                      DEFAULT -> case GHC.Char.$wlvl ds1 ret_ty ChessBoard.RowLoc of {}
                      1# -> GHC.Types.I# (GHC.Prim.-# ds1 49#) } } } #)) -}
30f34d505dace1bae49794cb3e36238f
  $wgameOver ::
    ChessBoard.Board
    -> GHC.Base.String
    -> ChessBoard.Pieces
    -> GHC.Base.String
    -> ChessBoard.Pieces
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U><L,1*U><S,1*U><L,1*U><L,1*U><L,U(U)><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: ChessBoard.Board)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: ChessBoard.Pieces)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: ChessBoard.Pieces)
                   (w :: GHC.Types.Int)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   gameFinished :: ChessBoard.GameOver
                   = ChessBoard.$wisGameOver ww ww2 ww4 (ChessBoard.turnToColor w)
                 } in
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #) <join 0>
                   = case gameFinished of wild {
                       DEFAULT -> (# w1, GHC.Tuple.() #)
                       ChessBoard.StaleMate
                       -> case (GHC.IO.Handle.Text.hPutStr'
                                  GHC.IO.Handle.FD.stdout
                                  (Main.$wstalelmateString ww1 ww3)
                                  GHC.Types.True)
                                 `cast`
                               (GHC.Types.N:IO[0] <()>_R)
                                 w1 of ds1 { (#,#) ipv ipv1 ->
                          System.Exit.exitSuccess1 @ () ipv } }
                 } in
                 case gameFinished of wild {
                   ChessBoard.CheckMate
                   -> case (GHC.IO.Handle.Text.hPutStr'
                              GHC.IO.Handle.FD.stdout
                              (case w of ww5 { GHC.Types.I# ww6 ->
                               Main.$wcongratsString ww1 ww3 ww6 })
                              GHC.Types.True)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             w1 of ds1 { (#,#) ipv ipv1 ->
                      System.Exit.exitSuccess1 @ () ipv }
                   ChessBoard.StaleMate -> $j
                   ChessBoard.Unfinished -> $j }) -}
b0a1d8f1ce77c2b573a32838f9f61c00
  $wgetPlayerMove ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (ChessBoard.Location, ChessBoard.Location) #)
  {- Arity: 4, Strictness: <L,U><L,U><S,U><S,U>, Inline: [2] -}
368310aa267cd890be4c2dddad686778
  $wrunGame ::
    ChessBoard.Board
    -> ChessBoard.Player
    -> ChessBoard.Player
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U><L,1*U(U,U,U,U,U(U))><L,1*U(U,U,U,U,U(U))><L,U(U)><S,U><L,1*U><S,U>,
     Inline: [2] -}
7bb085825c07d1abc3234f613d06c522
  $wstalelmateString ::
    GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Base.String) (ww1 :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   Main.gameOver5
                   (GHC.Base.++
                      @ GHC.Types.Char
                      ww
                      (GHC.CString.unpackAppendCString#
                         Main.gameOver4
                         (GHC.Base.++ @ GHC.Types.Char ww1 Main.gameOver2)))) -}
dc8f445f001b9333ec931067e879b87b
  $wupdateAll ::
    ChessBoard.Player
    -> ChessBoard.Player
    -> ChessBoard.Board
    -> GHC.Maybe.Maybe ChessBoard.Piece
    -> GHC.Types.Int
    -> (# ChessBoard.Board, ChessBoard.Player, ChessBoard.Player #)
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U(U))><L,U(U,U,U,U,U(U))><L,U><S,1*U><L,1*U(1*U)>,
     Inline: [2],
     Unfolding: (\ (ww :: ChessBoard.Player)
                   (ww1 :: ChessBoard.Player)
                   (ww2 :: ChessBoard.Board)
                   (ww3 :: GHC.Maybe.Maybe ChessBoard.Piece)
                   (w :: GHC.Types.Int) ->
                 case ww3 of wild {
                   GHC.Maybe.Nothing -> (# ww2, ww, ww1 #)
                   GHC.Maybe.Just ipv
                   -> case ipv of wild1 { ChessBoard.Piece ds cp ->
                      case w of wild2 { GHC.Types.I# ds1 ->
                      case ds1 of ds2 {
                        DEFAULT
                        -> (# ww2, ChessBoard.updateActive ww cp,
                              case ww1 of wild3 { ChessBoard.Player ds3 ds4 ds5 ds6 ds7 ->
                              ChessBoard.Player
                                ds3
                                ds4
                                (GHC.Types.: @ ChessBoard.ChessPiece cp ds5)
                                ds6
                                (case ds7 of wild4 { GHC.Types.I# x ->
                                 case cp of wild5 {
                                   ChessBoard.Pawn -> GHC.Types.I# (GHC.Prim.+# x 1#)
                                   ChessBoard.Bishop -> GHC.Types.I# (GHC.Prim.+# x 3#)
                                   ChessBoard.Knight -> GHC.Types.I# (GHC.Prim.+# x 3#)
                                   ChessBoard.Rook -> GHC.Types.I# (GHC.Prim.+# x 5#)
                                   ChessBoard.Queen -> GHC.Types.I# (GHC.Prim.+# x 9#)
                                   ChessBoard.King -> GHC.Types.I# (GHC.Prim.+# x 10#) } }) } #)
                        1#
                        -> (# ww2,
                              case ww of wild3 { ChessBoard.Player ds3 ds4 ds5 ds6 ds7 ->
                              ChessBoard.Player
                                ds3
                                ds4
                                (GHC.Types.: @ ChessBoard.ChessPiece cp ds5)
                                ds6
                                (case ds7 of wild4 { GHC.Types.I# x ->
                                 case cp of wild5 {
                                   ChessBoard.Pawn -> GHC.Types.I# (GHC.Prim.+# x 1#)
                                   ChessBoard.Bishop -> GHC.Types.I# (GHC.Prim.+# x 3#)
                                   ChessBoard.Knight -> GHC.Types.I# (GHC.Prim.+# x 3#)
                                   ChessBoard.Rook -> GHC.Types.I# (GHC.Prim.+# x 5#)
                                   ChessBoard.Queen -> GHC.Types.I# (GHC.Prim.+# x 9#)
                                   ChessBoard.King -> GHC.Types.I# (GHC.Prim.+# x 10#) } }) },
                              ChessBoard.updateActive ww1 cp #) } } } }) -}
954981f92eea290910e54bec2241f9d9
  askPlayerMove ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,1*U><L,1*U><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Main.$waskPlayerMove w w1 ww1 }) -}
6cb1093b09a8a9bee40b1a0532e23982
  askPlayerMove1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.askPlayerMove2) -}
bad234bbb3dde5ee075b7a1f87c04e67
  askPlayerMove2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (". You are playing as White."#) -}
c464803e82a74dd451e463e456b5b4bd
  askPlayerMove3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.askPlayerMove4) -}
19db93e674463e4dffcfd4fb642a5408
  askPlayerMove4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (". You are playing as Black."#) -}
fcbcbcfc905fe19cbab6b54300b9613e
  askPlayerMove5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Your move "#) -}
c082317b2ce506ebfc139f490b923897
  checkCapturedKing ::
    ChessBoard.Game -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSS),1*U(A,1*U(A,A,A,1*U,A),1*U(A,A,A,1*U,A))><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: ChessBoard.Game) (w1 :: GHC.Types.Int) ->
                 case w of ww { ChessBoard.Game ww1 ww2 ww3 ->
                 case ww2 of ww4 { ChessBoard.Player ww5 ww6 ww7 ww8 ww9 ->
                 case ww3 of ww10 { ChessBoard.Player ww11 ww12 ww13 ww14 ww15 ->
                 case w1 of ww16 { GHC.Types.I# ww17 ->
                 Main.$wcheckCapturedKing ww8 ww14 ww17 } } } }) -}
6e0557cc8fa5bfe2f57f4ea34af7c1a1
  checkMoveInput :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (move :: GHC.Base.String) ->
                 case GHC.List.$w!!
                        @ GHC.Types.Char
                        move
                        1# of ww { GHC.Types.C# ww1 ->
                 case {__pkg_ccall base-4.12.0.0 GHC.Prim.Int#
                                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Prim.Int# #)}
                        (GHC.Prim.ord# ww1)
                        GHC.Prim.realWorld# of wild { (#,#) ds ds1 ->
                 case GHC.Prim.leWord# (GHC.Prim.int2Word# ds1) 1114111## of lwild {
                   DEFAULT -> case GHC.Char.$wlvl ds1 ret_ty GHC.Types.Bool of {}
                   1#
                   -> case GHC.Prim.<# ds1 49# of lwild1 {
                        DEFAULT
                        -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.Int#
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Prim.Int# #)}
                                  (GHC.Prim.ord# ww1)
                                  GHC.Prim.realWorld# of wild1 { (#,#) ds2 ds3 ->
                           case GHC.Prim.leWord#
                                  (GHC.Prim.int2Word# ds3)
                                  1114111## of lwild2 {
                             DEFAULT -> case GHC.Char.$wlvl ds3 ret_ty GHC.Types.Bool of {}
                             1#
                             -> case GHC.Prim.># ds3 56# of lwild3 {
                                  DEFAULT
                                  -> case GHC.List.$w!!
                                            @ GHC.Types.Char
                                            move
                                            0# of ww2 { GHC.Types.C# ww3 ->
                                     case {__pkg_ccall base-4.12.0.0 GHC.Prim.Int#
                                                                     -> GHC.Prim.State#
                                                                          GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           GHC.Prim.Int# #)}
                                            (GHC.Prim.ord# ww3)
                                            GHC.Prim.realWorld# of wild2 { (#,#) ds4 ds5 ->
                                     case GHC.Prim.leWord#
                                            (GHC.Prim.int2Word# ds5)
                                            1114111## of lwild4 {
                                       DEFAULT
                                       -> case GHC.Char.$wlvl ds5 ret_ty GHC.Types.Bool of {}
                                       1#
                                       -> case GHC.Prim.<# ds5 65# of lwild5 {
                                            DEFAULT
                                            -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.Int#
                                                                               -> GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld
                                                                               -> (# GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld,
                                                                                     GHC.Prim.Int# #)}
                                                      (GHC.Prim.ord# ww3)
                                                      GHC.Prim.realWorld# of wild3 { (#,#) ds6 ds7 ->
                                               case GHC.Prim.leWord#
                                                      (GHC.Prim.int2Word# ds7)
                                                      1114111## of lwild6 {
                                                 DEFAULT
                                                 -> case GHC.Char.$wlvl ds7
                                                    ret_ty GHC.Types.Bool
                                                    of {}
                                                 1#
                                                 -> case GHC.Prim.># ds7 72# of lwild7 {
                                                      DEFAULT -> GHC.Types.True
                                                      1# -> GHC.Types.False } } }
                                            1# -> GHC.Types.False } } } }
                                  1# -> GHC.Types.False } } }
                        1# -> GHC.Types.False } } } }) -}
0ef07c2c20f33e2effac2a3a5c945572
  checkPlayerMove :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (inputs :: GHC.Base.String) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char inputs 0# of ww2 {
                   DEFAULT -> GHC.Types.False
                   5#
                   -> case GHC.List.$w!!
                             @ GHC.Types.Char
                             inputs
                             2# of wild { GHC.Types.C# x ->
                      case x of wild1 {
                        DEFAULT -> GHC.Types.False
                        ' '#
                        -> case Main.checkMoveInput
                                  (GHC.List.$wunsafeTake @ GHC.Types.Char 2# inputs) of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> Main.checkMoveInput
                                  (GHC.List.reverse1
                                     @ GHC.Types.Char
                                     (GHC.List.$wunsafeTake
                                        @ GHC.Types.Char
                                        2#
                                        (GHC.List.reverse1
                                           @ GHC.Types.Char
                                           inputs
                                           (GHC.Types.[] @ GHC.Types.Char)))
                                     (GHC.Types.[] @ GHC.Types.Char)) } } } }) -}
a2021b177f6d26de10363931192fd698
  congratsString ::
    ChessBoard.Game -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 2,
     Strictness: <S(LSS),1*U(A,1*U(1*U,A,A,A,A),1*U(1*U,A,A,A,A))><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: ChessBoard.Game) (w1 :: GHC.Types.Int) ->
                 case w of ww { ChessBoard.Game ww1 ww2 ww3 ->
                 case ww2 of ww4 { ChessBoard.Player ww5 ww6 ww7 ww8 ww9 ->
                 case ww3 of ww10 { ChessBoard.Player ww11 ww12 ww13 ww14 ww15 ->
                 case w1 of ww16 { GHC.Types.I# ww17 ->
                 Main.$wcongratsString ww5 ww11 ww17 } } } }) -}
d9919c06013668e0c6ce10b035773a5e
  congratsString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.congratsString2) -}
7e7de37a0305b656709475f422ab2146
  congratsString2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" in your game of chess!"#) -}
1e70bc670de84d5ff8efc83bcbebf772
  congratsString3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (". You have beaten "#) -}
d8d734cd76d9e4662759fca5d9bd41ea
  congratsString4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Congrats "#) -}
d3345bd75d9ed17ae3fbcebaa77ee9b9
  congratsString5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.congratsString6) -}
1d03950df36fc0d9e5a93ab2bc7f77bc
  congratsString6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Neither player wins. What is happening?"#) -}
6b6c1b01181939215acf97fb054b612d
  extractMove ::
    GHC.Base.String -> (ChessBoard.Location, ChessBoard.Location)
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case Main.$wextractMove w of ww { (#,#) ww1 ww2 -> (ww1, ww2) }) -}
58616f5c8bf30d619a3e312d22419141
  extractSingleMove :: GHC.Base.String -> ChessBoard.Location
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case Main.$wextractSingleMove w of ww { (#,#) ww1 ww2 ->
                 ChessBoard.Location ww1 ww2 }) -}
028dc6a3d2162e6129d57486978842c1
  gameOver :: ChessBoard.Game -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(LS(LLLSL)S),1*U(U,1*U(1*U,A,A,1*U,A),1*U(1*U,A,A,1*U,A))><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameOver1
                  `cast`
                (<ChessBoard.Game>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
2195c11cde793fc82821079561485ee4
  gameOver1 ::
    ChessBoard.Game
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(LS(LLLSL)S),1*U(U,1*U(1*U,A,A,1*U,A),1*U(1*U,A,A,1*U,A))><L,U(U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: ChessBoard.Game)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { ChessBoard.Game ww1 ww2 ww3 ->
                 case ww2 of ww4 { ChessBoard.Player ww5 ww6 ww7 ww8 ww9 ->
                 case ww3 of ww10 { ChessBoard.Player ww11 ww12 ww13 ww14 ww15 ->
                 Main.$wgameOver ww1 ww5 ww8 ww11 ww14 w1 w2 } } }) -}
109d77ae703647b2acf0d4c043a19018
  gameOver2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.gameOver3) -}
ceceab6837f26b859247d91864b64b43
  gameOver3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("."#) -}
afd7a4d65b2a3f1d86d97942fc51edcb
  gameOver4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" and "#) -}
8da8621ededfa5141854880ac72e1880
  gameOver5 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Boo, you have reached a stalemate. Enjoy your tie "#) -}
5d9b1ec4ac455313da1fdb6b8fd7d85a
  getPawnPromotion :: GHC.Types.IO ChessBoard.ChessPiece
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getPawnPromotion1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <ChessBoard.ChessPiece>_R)) -}
6e75741e0db940418dd991cbf5a5ee5d
  getPawnPromotion1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ChessBoard.ChessPiece #)
  {- Arity: 1, Strictness: <S,U> -}
6f4f14976e06698df893c404d135adb7
  getPlayerMove ::
    ChessBoard.Game
    -> GHC.Types.Int
    -> GHC.Types.IO (ChessBoard.Location, ChessBoard.Location)
  {- Arity: 3,
     Strictness: <S(LSS),1*U(A,1*U(U,A,A,A,A),1*U(U,A,A,A,A))><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getPlayerMove1
                  `cast`
                (<ChessBoard.Game>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <(ChessBoard.Location, ChessBoard.Location)>_R)) -}
f9be425fa7bbe9d01f0a6810f30baf7d
  getPlayerMove1 ::
    ChessBoard.Game
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (ChessBoard.Location, ChessBoard.Location) #)
  {- Arity: 3,
     Strictness: <S(LSS),1*U(A,1*U(U,A,A,A,A),1*U(U,A,A,A,A))><S(S),1*U(U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: ChessBoard.Game)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { ChessBoard.Game ww1 ww2 ww3 ->
                 case ww2 of ww4 { ChessBoard.Player ww5 ww6 ww7 ww8 ww9 ->
                 case ww3 of ww10 { ChessBoard.Player ww11 ww12 ww13 ww14 ww15 ->
                 case w1 of ww16 { GHC.Types.I# ww17 ->
                 Main.$wgetPlayerMove ww5 ww11 ww17 w2 } } } }) -}
c30f0662d2a89072236f3de13bad0f12
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
555164febe7eec4395c2da2392b4e4ee
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.hSetBuffering1
                        GHC.IO.Handle.FD.stdout
                        GHC.IO.Handle.Types.NoBuffering
                        s of ds1 { (#,#) ipv ipv1 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main9
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main7
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main5
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main3
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 Main.$wrunGame
                   ChessBoard.startBoard
                   (ChessBoard.Player
                      ipv7
                      ChessBoard.White
                      (GHC.Types.[] @ ChessBoard.ChessPiece)
                      ChessBoard.blackPlayer1
                      ChessBoard.$fShowPlayer2)
                   (ChessBoard.Player
                      ipv11
                      ChessBoard.Black
                      (GHC.Types.[] @ ChessBoard.ChessPiece)
                      ChessBoard.blackPlayer1
                      ChessBoard.$fShowPlayer2)
                   Main.main2
                   0#
                   (GHC.Types.[] @ GHC.Types.Char)
                   ipv12 } } } } } } }) -}
fa8eb94c2f87a6a5350e5c64aad923ed
  main10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Haskell Chess"#) -}
0b1d48530ccc3dcb6d4ecbec6c6421a7
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
c2454a7837b4f4ae836aaed13c5b720a
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
f235ed0bea82dae85a13c2a238743e0f
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main4) -}
99cd9ec1269a1ed245a56d3d4779e072
  main4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("When it is your turn, specify moves by two characters of column row for start, and then two characters for column and row as end. Example: A3 C5"#) -}
93bd6909d35ac461ea86a6aa3e2c27ba
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main6) -}
2f5f92edbb9386a2cc640788ca4de06b
  main6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("What is the name of Player 2 (Black)?"#) -}
05fb29911961e4d91ca9fa1307c5e984
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main8) -}
91fbfac07446307043d03e1430d25599
  main8 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("What is the name of Player 1 (White)?"#) -}
d4223d095f9f1ca9c6d528fe5ea0c88e
  main9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main10) -}
8f33d452565fd2826d5bbbdddb863b12
  makeMove ::
    ChessBoard.Game
    -> ChessBoard.Location
    -> ChessBoard.Location
    -> GHC.Types.Int
    -> ChessBoard.Game
  {- Arity: 4,
     Strictness: <S(SLL),1*U(U,U(U,U,U,U,U(U)),U(U,U,U,U,U(U)))><L,1*U(U(U),U(U))><S(S(S)S(S)),1*U(1*U(U),1*U(U))><L,1*U(1*U)>m,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: ChessBoard.Game)
                   (w1 :: ChessBoard.Location)
                   (w2 :: ChessBoard.Location)
                   (w3 :: GHC.Types.Int) ->
                 case w of ww { ChessBoard.Game ww1 ww2 ww3 ->
                 case w2 of ww4 { ChessBoard.Location ww5 ww6 ->
                 case ww5 of ww7 { GHC.Types.I# ww8 ->
                 case ww6 of ww9 { GHC.Types.I# ww10 ->
                 case ChessBoard.$wupdateBoard
                        ww1
                        w1
                        ww8
                        ww10 of ww11 { (#,#) ww12 ww13 ->
                 case Main.$wupdateAll
                        ww2
                        ww3
                        ww12
                        ww13
                        w3 of ww14 { (#,,#) ww15 ww16 ww17 ->
                 ChessBoard.Game ww15 ww16 ww17 } } } } } }) -}
4e35584cd8a2a8699c614284180ded90
  nextTurn :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# ds1 ->
                 case ds1 of ds2 {
                   DEFAULT -> Main.main2 1# -> Main.nextTurn1 } }) -}
58bc7dd6c799b7870dea52a82b9ee008
  nextTurn1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
bf89786b5820ca57c6d7e239913e721b
  runGame ::
    ChessBoard.Game
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <S,1*U(U,1*U(U,U,U,U,U(U)),1*U(U,U,U,U,U(U)))><L,U(U)><S(S),1*U(U)><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.runGame1
                  `cast`
                (<ChessBoard.Game>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
0b50ddb8d148d426358efe1e2f6969cb
  runGame1 ::
    ChessBoard.Game
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S,1*U(U,1*U(U,U,U,U,U(U)),1*U(U,U,U,U,U(U)))><L,U(U)><S(S),1*U(U)><L,1*U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: ChessBoard.Game)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Base.String)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { ChessBoard.Game ww1 ww2 ww3 ->
                 case w2 of ww4 { GHC.Types.I# ww5 ->
                 Main.$wrunGame ww1 ww2 ww3 w1 ww5 w3 w4 } }) -}
7fac36fa8ef56d0d09f519e322e7a5aa
  stalelmateString :: ChessBoard.Game -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S(LSS),1*U(A,1*U(1*U,A,A,A,A),1*U(1*U,A,A,A,A))>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ChessBoard.Game) ->
                 case w of ww { ChessBoard.Game ww1 ww2 ww3 ->
                 case ww2 of ww4 { ChessBoard.Player ww5 ww6 ww7 ww8 ww9 ->
                 case ww3 of ww10 { ChessBoard.Player ww11 ww12 ww13 ww14 ww15 ->
                 Main.$wstalelmateString ww5 ww11 } } }) -}
49c631c37752b07e4b5580ca8f931dba
  updateAll ::
    ChessBoard.Game
    -> (ChessBoard.Board, GHC.Maybe.Maybe ChessBoard.Piece)
    -> GHC.Types.Int
    -> ChessBoard.Game
  {- Arity: 3,
     Strictness: <S,1*U(A,U(U,U,U,U,U(U)),U(U,U,U,U,U(U)))><S(LS),1*U(U,1*U)><L,1*U(1*U)>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: ChessBoard.Game)
                   (w1 :: (ChessBoard.Board, GHC.Maybe.Maybe ChessBoard.Piece))
                   (w2 :: GHC.Types.Int) ->
                 case w of ww { ChessBoard.Game ww1 ww2 ww3 ->
                 case w1 of ww4 { (,) ww5 ww6 ->
                 case Main.$wupdateAll
                        ww2
                        ww3
                        ww5
                        ww6
                        w2 of ww7 { (#,,#) ww8 ww9 ww10 ->
                 ChessBoard.Game ww8 ww9 ww10 } } }) -}
d018aa3da025ac4f4880bfc919016138
  validPawnPromote ::
    GHC.Base.String
    -> (GHC.Types.Bool, GHC.Maybe.Maybe ChessBoard.ChessPiece)
  {- Arity: 1, Strictness: <S,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case GHC.Base.eqString w Main.validPawnPromote14 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString w Main.validPawnPromote12 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString w Main.validPawnPromote10 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString w Main.validPawnPromote8 of wild3 {
                                  GHC.Types.False
                                  -> case GHC.Base.eqString w Main.validPawnPromote6 of wild4 {
                                       GHC.Types.False
                                       -> (GHC.Types.False,
                                           GHC.Maybe.Nothing @ ChessBoard.ChessPiece)
                                       GHC.Types.True -> (GHC.Types.True, Main.validPawnPromote5) }
                                  GHC.Types.True -> (GHC.Types.True, Main.validPawnPromote4) }
                             GHC.Types.True -> (GHC.Types.True, Main.validPawnPromote3) }
                        GHC.Types.True -> (GHC.Types.True, Main.validPawnPromote2) }
                   GHC.Types.True -> (GHC.Types.True, Main.validPawnPromote1) }) -}
68f279179721b3fecb7f0ea91bc18ae0
  validPawnPromote1 :: GHC.Maybe.Maybe ChessBoard.ChessPiece
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ ChessBoard.ChessPiece
                   ChessBoard.Pawn) -}
771ae175b0b88fec33660e9d798c5da8
  validPawnPromote10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.validPawnPromote11) -}
448995565dcb85fd66186de18874baec
  validPawnPromote11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bishop"#) -}
5d5e47ffa4f8c029b2f99f8d8db7e383
  validPawnPromote12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.validPawnPromote13) -}
3de7cedbba7e8f4a41e30aac2e385456
  validPawnPromote13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Knight"#) -}
0a21ea0a9e401fc44a541b50bf997b49
  validPawnPromote14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.validPawnPromote15) -}
e53922ccfb8a0f664bb01aaf4ca8032f
  validPawnPromote15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Pawn"#) -}
81602044bbe6e3d0d9de480b024998cd
  validPawnPromote2 :: GHC.Maybe.Maybe ChessBoard.ChessPiece
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ ChessBoard.ChessPiece
                   ChessBoard.Knight) -}
9fd9bf3a275b0d3c5d7ba397e05fdf35
  validPawnPromote3 :: GHC.Maybe.Maybe ChessBoard.ChessPiece
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ ChessBoard.ChessPiece
                   ChessBoard.Bishop) -}
08bf1082060ea3075b7d9624b4c17c83
  validPawnPromote4 :: GHC.Maybe.Maybe ChessBoard.ChessPiece
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ ChessBoard.ChessPiece
                   ChessBoard.Rook) -}
6640a2196e06f6bfa4ac27214bea8942
  validPawnPromote5 :: GHC.Maybe.Maybe ChessBoard.ChessPiece
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ ChessBoard.ChessPiece
                   ChessBoard.Queen) -}
7c9ba9dfba2dfa15cd5caa3bb419821a
  validPawnPromote6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.validPawnPromote7) -}
95331cce2af1f06e09dd98d3d28b388d
  validPawnPromote7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Queen"#) -}
b07e670dff26b4a60e4866c9be914279
  validPawnPromote8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.validPawnPromote9) -}
23817568a01af985a4c548ccb003d424
  validPawnPromote9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Rook"#) -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

